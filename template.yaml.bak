AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  AutoOps contains useful operational processes represented as a state machines with AWS StepFunctions.
Metadata:
  AWS::ServerlessRepo::Application:
    Name: AutoOps
    Description: A toolkit for auto ops in AWS.
    Author: whuaning
    SpdxLicenseId: Apache-2.0
    ReadmeUrl: README.md
    SemanticVersion: 0.0.1
Resources:
  AutoOpsApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      EndpointConfiguration: PRIVATE
      Auth:
        ResourcePolicy:
          SourceVpcWhitelist: 
            - vpc-0f085c75
  EBSScalingStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: statemachine/ebs_autoscaling.asl.json
      DefinitionSubstitutions:
        GetVolumeDetailsFunctionArn: !GetAtt GetVolumeDetailsFunction.Arn
        ModifyVolumeSizeFunctionArn: !GetAtt ModifyVolumeSizeFunction.Arn
        GetVolumeIdForWindowsFunctionArn: !GetAtt GetVolumeIdForWindowsFunction.Arn
        GetVolumeIdForLinuxFunctionArn: !GetAtt GetVolumeIdForLinuxFunction.Arn
        LoadEbsAutoScalingInputFunctionArn: !GetAtt LoadEbsAutoScalingInputFunction.Arn
        GrowLinuxXfsFunctionArn: !GetAtt GrowLinuxXfsFunction.Arn
        GrowWindowsNtfsFunctionArn: !GetAtt GrowWindowsNtfsFunction.Arn
      Events:
        EBSSpaceAlarm:
          Type: CloudWatchEvent 
          Properties:
            Pattern:
              source:
                - aws.cloudwatch
              detail-type:
                - "CloudWatch Alarm State Change"
              detail:
                configuration: 
                  metrics:
                    metricStat:
                      metric:
                        name:
                          - "disk_used_percent"
                          - "LogicalDisk % Free Space"
                state:
                  value: 
                    - ALARM
        ApiEvent:
          Type: Api
          Properties:
            Path: /ebs_scale
            Method: POST
            RestApiId:
              Ref: AutoOpsApiGateway
      Policies: 
        - LambdaInvokePolicy:
            FunctionName: !Ref GetVolumeDetailsFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref ModifyVolumeSizeFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref GetVolumeIdForWindowsFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref GetVolumeIdForLinuxFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref LoadEbsAutoScalingInputFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref GrowLinuxXfsFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref GrowWindowsNtfsFunction
  EC2AlarmCreatingStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: statemachine/ec2alarm_autocreating.asl.json
      DefinitionSubstitutions:
        LoadEc2AlarmAutoCreatingInputFunctionArn: !GetAtt LoadEc2AlarmAutoCreatingInputFunction.Arn
        GetInstanceDetailFunctionArn: !GetAtt GetInstanceDetailFunction.Arn
        GetWindowsVolumesFunctionArn: !GetAtt GetWindowsVolumesFunction.Arn
        GetLinuxVolumesFunctionArn: !GetAtt GetLinuxVolumesFunction.Arn
        CreateLinuxDiskAlarmsFunctionArn: !GetAtt CreateLinuxDiskAlarmsFunction.Arn
        CreateWindowsDiskAlarmsFunctionArn: !GetAtt CreateWindowsDiskAlarmsFunction.Arn
        DeleteEc2DiskAlarmsFunctionArn: !GetAtt DeleteEc2DiskAlarmsFunction.Arn
        GetSSMInformationFunctionArn: !GetAtt GetSSMInformationFunction.Arn
      Events:
        EC2StartTerminate:
          Type: CloudWatchEvent 
          Properties:
            Pattern:
              source:
                - aws.ec2
              detail-type:
                - "EC2 Instance State-change Notification"
              detail:
                state: 
                  - running
                  - terminated
        ApiEvent:
          Type: Api
          Properties:
            Path: /ec2_alarm_create
            Method: POST
            RestApiId:
              Ref: AutoOpsApiGateway
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref LoadEc2AlarmAutoCreatingInputFunction 
        - LambdaInvokePolicy:
            FunctionName: !Ref GetInstanceDetailFunction 
        - LambdaInvokePolicy:
            FunctionName: !Ref GetWindowsVolumesFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref GetLinuxVolumesFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref CreateLinuxDiskAlarmsFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref CreateWindowsDiskAlarmsFunction 
        - LambdaInvokePolicy:
            FunctionName: !Ref DeleteEc2DiskAlarmsFunction 
        - LambdaInvokePolicy:
            FunctionName: !Ref GetSSMInformationFunction
  EbsTagUpdatingStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: statemachine/ebstag_autoupdating.asl.json
      DefinitionSubstitutions:
        LoadEbsTagAutoUpdatingInputFunctionArn: !GetAtt LoadEbsTagAutoUpdatingInputFunction.Arn
        CreateEbsTagsFromEc2FunctionArn: !GetAtt CreateEbsTagsFromEc2Function.Arn      
      Events:
        EC2Running:
          Type: CloudWatchEvent 
          Properties:
            Pattern:
              source:
                - aws.ec2
              detail-type:
                - "EC2 Instance State-change Notification"
              detail:
                state: 
                  - running
        ApiEvent:
          Type: Api
          Properties:
            Path: /ebs_tag_update
            Method: POST
            RestApiId:
              Ref: AutoOpsApiGateway
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref LoadEbsTagAutoUpdatingInputFunction 
        - LambdaInvokePolicy:
            FunctionName: !Ref CreateEbsTagsFromEc2Function
  DistributionTagUpdatingStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: statemachine/distribution_autotag.asl.json
      DefinitionSubstitutions:
        LoadDistributionTagAutoUpdatingInputFunctionArn: !GetAtt LoadDistributionTagAutoUpdatingInputFunction.Arn
        GetDistributionTagFunctionArn: !GetAtt GetDistributionTagFunction.Arn
        GetUserAttributeFunctionArn: !GetAtt GetUserAttributeFunction.Arn
        GetRoleAttributeFunctionArn: !GetAtt GetRoleAttributeFunction.Arn  
        UpdateDistributionTagFunctionArn: !GetAtt UpdateDistributionTagFunction.Arn  
      Events:
        EC2Running:
          Type: CloudWatchEvent 
          Properties:
            Pattern:
              source:
                - aws.cloudfront
              detail-type:
                - "AWS API Call via CloudTrail"
              detail:
                eventName: 
                  - UpdateDistribution
        ApiEvent:
          Type: Api
          Properties:
            Path: /distribution_tag_update
            Method: POST
            RestApiId:
              Ref: AutoOpsApiGateway
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref LoadDistributionTagAutoUpdatingInputFunction 
        - LambdaInvokePolicy:
            FunctionName: !Ref GetDistributionTagFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref GetUserAttributeFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref GetRoleAttributeFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref UpdateDistributionTagFunction
  LoadEbsAutoScalingInputFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.8
      Description: ''
      MemorySize: 128
      Timeout: 15
      CodeUri: functions/LoadEbsAutoScalingInput
  LoadEc2AlarmAutoCreatingInputFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.8
      Description: ''
      MemorySize: 128
      Timeout: 30
      CodeUri: functions/LoadEc2AlarmAutoCreatingInput
  LoadEbsTagAutoUpdatingInputFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.8
      Description: ''
      MemorySize: 128
      Timeout: 30
      CodeUri: functions/LoadEbsTagAutoUpdatingInput
  LoadDistributionTagAutoUpdatingInputFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.8
      Description: ''
      MemorySize: 128
      Timeout: 30
      CodeUri: functions/LoadDistributionTagAutoUpdatingInput 
  GetVolumeDetailsFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.8
      Description: ''
      MemorySize: 128
      Timeout: 30
      CodeUri: functions/GetVolumeDetails
      Policies: [AmazonEC2ReadOnlyAccess]
  ModifyVolumeSizeFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.8
      Description: ''
      MemorySize: 128
      Timeout: 30
      CodeUri: functions/ModifyVolumeSize
      Policies: [AmazonEC2FullAccess]
      Environment:
        Variables:
          SCALING_SIZE: 10
  GetVolumeIdForLinuxFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.8
      Description: ''
      MemorySize: 128
      Timeout: 30
      CodeUri: functions/GetVolumeIdForLinux
      Policies: [AmazonEC2ReadOnlyAccess]
  GetVolumeIdForWindowsFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.8
      Description: ''
      MemorySize: 128
      Timeout: 120
      CodeUri: functions/GetVolumeIdForWindows
      Policies: [AmazonSSMFullAccess]
      Environment:
        Variables:
          SSM_DOCNAME: !Ref GetWindowsVolumesDoc
  GrowLinuxXfsFunction:
    Type: 'AWS::Serverless::Function'
    Properties: 
      Handler: app.lambda_handler
      Runtime: python3.8
      Description: ''
      MemorySize: 128
      Timeout: 15
      CodeUri: functions/GrowLinuxXfs
      Policies: [AmazonSSMFullAccess]
      Environment:
        Variables:
          SSM_DOCNAME: !Ref GrowLinuxXfsDoc
  GrowWindowsNtfsFunction:
    Type: 'AWS::Serverless::Function'
    Properties: 
      Handler: app.lambda_handler
      Runtime: python3.8
      Description: ''
      MemorySize: 128
      Timeout: 15
      CodeUri: functions/GrowWindowsNtfs
      Policies: [AmazonSSMFullAccess]
      Environment:
        Variables:
          SSM_DOCNAME: !Ref GrowWindowsNtfsDoc
  GetWindowsVolumesFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.8
      Description: ''
      MemorySize: 128
      Timeout: 120
      CodeUri: functions/GetWindowsVolumes
      Policies: [AmazonSSMFullAccess]
      Environment:
        Variables:
          SSM_DOCNAME: !Ref GetWindowsVolumesDoc
  GetLinuxVolumesFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.8
      Description: ''
      MemorySize: 128
      Timeout: 120
      CodeUri: functions/GetLinuxVolumes
      Policies: [AmazonSSMFullAccess]
      Environment:
        Variables:
          SSM_DOCNAME: !Ref GetLinuxVolumesDoc
  CreateLinuxDiskAlarmsFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.8
      Description: ''
      MemorySize: 128
      Timeout: 30
      CodeUri: functions/CreateLinuxDiskAlarms
      Policies: [CloudWatchFullAccess]
      Environment:
        Variables:
          USAGE_THRESHOLD: 80
  CreateWindowsDiskAlarmsFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.8
      Description: ''
      MemorySize: 128
      Timeout: 30
      CodeUri: functions/CreateWindowsDiskAlarms
      Policies: [CloudWatchFullAccess]       
      Environment:
        Variables:
          FREE_THRESHOLD: 20
  DeleteEc2DiskAlarmsFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.8
      Description: ''
      MemorySize: 128
      Timeout: 30
      CodeUri: functions/DeleteEc2DiskAlarms
      Policies: [CloudWatchFullAccess]       
  GetSSMInformationFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.8
      Description: ''
      MemorySize: 128
      Timeout: 120
      CodeUri: functions/GetSSMInformation
      Policies: [AmazonSSMFullAccess]       
      Environment:
        Variables:
          FREE_THRESHOLD: 20
  GetInstanceDetailFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.8
      Description: ''
      MemorySize: 128
      Timeout: 30
      CodeUri: functions/GetInstanceDetail
      Policies: [AmazonEC2ReadOnlyAccess]
  CreateEbsTagsFromEc2Function:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.8
      Description: ''
      MemorySize: 128
      Timeout: 30
      CodeUri: functions/CreateEbsTagsFromEc2
      Policies: [AmazonEC2FullAccess]
  GetDistributionTagFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.8
      Description: ''
      MemorySize: 128
      Timeout: 30
      CodeUri: functions/GetDistributionTag
      Policies: [CloudFrontReadOnlyAccess]
  GetUserAttributeFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.8
      Description: ''
      MemorySize: 128
      Timeout: 30
      CodeUri: functions/GetUserAttribute
      Policies: [IAMReadOnlyAccess]
  GetRoleAttributeFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.8
      Description: ''
      MemorySize: 128
      Timeout: 30  
      CodeUri: functions/GetRoleAttribute
      Policies: [IAMReadOnlyAccess]
  UpdateDistributionTagFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.8
      Description: ''
      MemorySize: 128
      Timeout: 30
      CodeUri: functions/UpdateDistributionTag
      Policies: [CloudFrontFullAccess]
  GetWindowsVolumesDoc:
    Type: AWS::SSM::Document
    Properties: 
      DocumentType: Command
      Content: >
        {
          "schemaVersion": "2.2",
          "description": "List Disks on Windows Instance",
          "parameters": {},
          "mainSteps": [
            {
              "action": "aws:runPowerShellScript",
              "name": "GetWindowsVolumesDoc",
              "inputs": {
                "runCommand": [
                  "function Get-EC2InstanceMetadata {",
                  "  param([string]$Path)",
                  "  (Invoke-WebRequest -Uri \"http://169.254.169.254/latest/$Path\" -UseBasicParsing).Content",
                  "}",
                  "function Convert-SCSITargetIdToDeviceName {",
                  "  param([int]$SCSITargetId)",
                  "  If ($SCSITargetId -eq 0) {",
                  "    return \"sda1\"",
                  "  }",
                  "  $deviceName = \"xvd\"",
                  "  If ($SCSITargetId -gt 25) {",
                  "    $deviceName += [char](0x60 + [int]($SCSITargetId / 26))",
                  "  }",
                  "  $deviceName += [char](0x61 + $SCSITargetId % 26)",
                  "  return $deviceName",
                  "}",
                  "Try {",
                  "  $InstanceId = Get-EC2InstanceMetadata \"meta-data/instance-id\"",
                  "  $AZ = Get-EC2InstanceMetadata \"meta-data/placement/availability-zone\"",
                  "  $Region = $AZ.Remove($AZ.Length - 1)",
                  "  $BlockDeviceMappings = (Get-EC2Instance -Region $Region -Instance $InstanceId).Instances.BlockDeviceMappings",
                  "  $VirtualDeviceMap = @{}",
                  "  (Get-EC2InstanceMetadata \"meta-data/block-device-mapping\").Split(\"`n\") | ForEach-Object {",
                  "    $VirtualDevice = $_",
                  "    $BlockDeviceName = Get-EC2InstanceMetadata \"meta-data/block-device-mapping/$VirtualDevice\"",
                  "    $VirtualDeviceMap[$BlockDeviceName] = $VirtualDevice",
                  "    $VirtualDeviceMap[$VirtualDevice] = $BlockDeviceName",
                  "  }",
                  "}",
                  "Catch {",
                  "  Write-Host \"Could not access the AWS API, therefore, VolumeId is not available. ",
                  "Verify that you provided your access keys.\" -ForegroundColor Yellow",
                  "}",
                  "",
                  "Get-disk | ForEach-Object {",
                  "  $DriveLetter = $null",
                  "  $VolumeName = $null",
                  "",
                  "  $DiskDrive = $_",
                  "  $Disk = $_.Number",
                  "  $Partitions = $_.NumberOfPartitions",
                  "  $EbsVolumeID = $_.SerialNumber -replace \"_[^ ]*$\" -replace \"vol\", \"vol-\"",
                  "  Get-Partition -DiskId $_.Path | ForEach-Object {",
                  "    if ($_.DriveLetter -ne \"\") {",
                  "      $DriveLetter = $_.DriveLetter",
                  "      $VolumeName = (Get-PSDrive | Where-Object {$_.Name -eq $DriveLetter}).Description",
                  "    }",
                  "  } ",
                  "",
                  "  If ($DiskDrive.path -like \"*PROD_PVDISK*\") {",
                  "    $BlockDeviceName = Convert-SCSITargetIdToDeviceName((Get-WmiObject -Class Win32_Diskdrive | Where-Object {$_.DeviceID -eq (\"\\\\.\\PHYSICALDRIVE\" + $DiskDrive.Number) }).SCSITargetId)",
                  "    $BlockDeviceName = \"/dev/\" + $BlockDeviceName",
                  "    $BlockDevice = $BlockDeviceMappings | Where-Object { $BlockDeviceName -like \"*\"+$_.DeviceName+\"*\" }",
                  "    $EbsVolumeID = $BlockDevice.Ebs.VolumeId ",
                  "    $VirtualDevice = If ($VirtualDeviceMap.ContainsKey($BlockDeviceName)) { $VirtualDeviceMap[$BlockDeviceName] } Else { $null }",
                  "  }",
                  "  ElseIf ($DiskDrive.path -like \"*PROD_AMAZON_EC2_NVME*\") {",
                  "    $BlockDeviceName = Get-EC2InstanceMetadata \"meta-data/block-device-mapping/ephemeral$((Get-WmiObject -Class Win32_Diskdrive | Where-Object {$_.DeviceID -eq (\"\\\\.\\PHYSICALDRIVE\"+$DiskDrive.Number) }).SCSIPort - 2)\"",
                  "    $BlockDevice = $null",
                  "    $VirtualDevice = If ($VirtualDeviceMap.ContainsKey($BlockDeviceName)) { $VirtualDeviceMap[$BlockDeviceName] } Else { $null }",
                  "  }",
                  "  ElseIf ($DiskDrive.path -like \"*PROD_AMAZON*\") {",
                  "    $BlockDevice = \"\"",
                  "    $BlockDeviceName = ($BlockDeviceMappings | Where-Object {$_.ebs.VolumeId -eq $EbsVolumeID}).DeviceName",
                  "    $VirtualDevice = $null",
                  "  }",
                  "  Else {",
                  "    $BlockDeviceName = $null",
                  "    $BlockDevice = $null",
                  "    $VirtualDevice = $null",
                  "  }",
                  "  New-Object PSObject -Property @{",
                  "    Disk          = $Disk;",
                  "    Partitions    = $Partitions;",
                  "    DriveLetter   = If ($DriveLetter -eq $null) { \"N/A\" } Else { $DriveLetter };",
                  "    EbsVolumeId   = If ($EbsVolumeID -eq $null) { \"N/A\" } Else { $EbsVolumeID };",
                  "    Device        = If ($BlockDeviceName -eq $null) { \"N/A\" } Else { $BlockDeviceName };",
                  "    VirtualDevice = If ($VirtualDevice -eq $null) { \"N/A\" } Else { $VirtualDevice };",
                  "    VolumeName    = If ($VolumeName -eq $null) { \"N/A\" } Else { $VolumeName };",
                  "  }",
                  "} | Sort-Object Disk | Format-Table -AutoSize -Property Disk, Partitions, DriveLetter, EbsVolumeId, Device, VirtualDevice, VolumeName"
                ]
              }
            }
          ]
        } 
  GetLinuxVolumesDoc:
    Type: AWS::SSM::Document
    Properties: 
      DocumentType: Command
      Content: >
        {
          "schemaVersion": "2.2",
          "description": "List Disks on Linux Instance",
          "parameters": {},
          "mainSteps": [
            {
              "action": "aws:runShellScript",
              "name": "GetLinuxVolumes",
              "inputs": {
                "runCommand": [
                  "df -l | grep ^/dev/"
                ]
              }
            }
          ]
        }
  GrowLinuxXfsDoc:
    Type: AWS::SSM::Document
    Properties: 
      DocumentType: Command
      Content: >
        {
          "schemaVersion": "2.2",
          "description": "Command Document Example JSON Template",
          "parameters": {
            "DeviceName": {
              "type": "String",
              "description": "Device Name ",
              "default": "/dev/xvda"
            },
            "PartitionNum": {
              "type": "String",
              "description": "Device Number ",
              "default": "1"
            },
            "MountPoint": {
              "type": "String",
              "description": "Mount Point ",
              "default": "/"
            }
          },
          "mainSteps": [
            {
              "action": "aws:runShellScript",
              "name": "GrowLinuxXfsDoc",
              "inputs": {
                "runCommand": [
                  "growpart {{DeviceName}} {{PartitionNum}}",
                  "xfs_growfs -d {{MountPoint}}"
                ]
              }
            }
          ]
        }
  GrowWindowsNtfsDoc:
    Type: AWS::SSM::Document
    Properties: 
      DocumentType: Command
      Content: >
        {
          "schemaVersion": "2.2",
          "description": "Command Document Example JSON Template",
          "parameters": {
            "DriveLetter": {
              "type": "String",
              "description": "Drive letter to grow",
              "default": "d"
            }
          },
          "mainSteps": [
            {
              "action": "aws:runPowerShellScript",
              "name": "GrowWindowsNtfsDoc",
              "inputs": {
                "runCommand": [
                  "Resize-Partition -DriveLetter {{DriveLetter}} -Size (Get-PartitionSupportedSize -DriveLetter {{DriveLetter}}).sizemax"
                ]
              }
            }
          ]
        }
Outputs:
  EBSScalingStateMachineArn:
    Description: "EBS auto-scaling state machine ARN"
    Value: !Ref EBSScalingStateMachine
  EC2AlarmCreatingStateMachineArn:
    Description: "EC2 disk alarm auto-creating state machine ARN"
    Value: !Ref EC2AlarmCreatingStateMachine
  EbsTagUpdatingStateMachineArn:
    Description: "EBS tag auto-updating state machine ARN"
    Value: !Ref EbsTagUpdatingStateMachine
  DistributionTagUpdatingStateMachineArn:
    Description: "Distribution tag auto-updating state machine ARN"
    Value: !Ref DistributionTagUpdatingStateMachine
  APIEndpoint:
    Description: "APIGateway Endpoint to start start machines' execution"
    Value: !Join ["/", ["https:", "", !Join [".", [!Ref AutoOpsApiGateway, "execute-api", !Ref AWS::Region, "amazonaws.com"]], !Ref AutoOpsApiGatewayProdStage]]  




